{"version":3,"sources":["feedback.jsx","App.js","index.js"],"names":["SignUpForm","state","good","neutral","bad","countAmountOfClick","name","setState","prevState","prevValue","countTotal","Object","values","reduce","acc","num","countPositiveFeedbackPercentage","totalSum","Math","round","this","Buttons","keys","map","btn","onClick","shortid","generate","staticSection","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAwDeA,E,4MApDbC,MAAQ,CACRC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAELC,mBAAqB,SAACC,GACpB,EAAKC,UAAS,SAAAC,GACZ,IAAMC,EAAYD,EAAUF,GAC5B,OAAO,eACJA,EAAOG,EAAY,O,EAI1BC,WAAa,WAGX,OAFcC,OAAOC,OAAO,EAAKX,OACfY,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,IAAK,I,EAGpDC,gCAAkC,WAChC,IACMd,EAAO,EAAKD,MAAMC,KAClBe,EAAW,EAAKP,aAEtB,OADaQ,KAAKC,MAAMjB,EAAOe,EAAW,M,4CAI5C,WAAU,IACFZ,EAAsBe,KAAtBf,mBAGAgB,EAFUV,OAAOW,KAAKF,KAAKnB,OAETsB,KAAI,SAACC,GAC5B,OACE,wBAAQC,QAAS,WAAKpB,EAAmBmB,IAAzC,SAA2EA,GAArBE,IAAQC,eAI3DC,EADQR,KAAKV,aACY,qCAC/B,2CACI,sCAASU,KAAKnB,MAAMC,QACpB,yCAAYkB,KAAKnB,MAAME,WACvB,qCAAQiB,KAAKnB,MAAMG,OACnB,uCAAUgB,KAAKV,gBACf,4CAAeU,KAAKJ,kCAApB,UACG,kDACP,OACE,qCACE,8BAAMK,IACLO,S,GAhDgBC,aCOVC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5585abd6.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport shortid from 'shortid'\r\n\r\nclass SignUpForm extends Component {\r\n  state = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n  }\r\n  countAmountOfClick = (name) => {\r\n    this.setState(prevState => {\r\n      const prevValue = prevState[name];\r\n      return {\r\n        [name]: prevValue + 1\r\n      }\r\n    })\r\n  }\r\n  countTotal = () => {\r\n    const total = Object.values(this.state)\r\n    const sum = total.reduce((acc, num) => acc + num, 0)\r\n    return sum\r\n  }\r\n  countPositiveFeedbackPercentage = () => {\r\n    let percentage = 0\r\n    const good = this.state.good\r\n    const totalSum = this.countTotal()\r\n    percentage = Math.round(good / totalSum * 100)\r\n    return percentage\r\n  }\r\n \r\n  render() {\r\n   const {countAmountOfClick} = this\r\n    const btnKeys = Object.keys(this.state)\r\n\r\n    const Buttons = btnKeys.map((btn) => {\r\n     return (\r\n       <button onClick={()=>{countAmountOfClick(btn)}}  key={shortid.generate()}>{btn}</button>\r\n    ) \r\n    })\r\n    const total = this.countTotal()\r\n    const staticSection = total ? (<>\r\n    <h2>Statistic</h2>\r\n        <p>Good:{this.state.good}</p>\r\n        <p>Neutral:{this.state.neutral}</p>\r\n        <p>Bad:{this.state.bad}</p>\r\n        <p>Total:{this.countTotal()}</p>\r\n        <p>Percentage:{this.countPositiveFeedbackPercentage()}%</p>\r\n    </>) : <p>No feedback given</p>\r\n    return (\r\n      <>\r\n        <div>{Buttons}</div>\r\n        {staticSection}\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default SignUpForm;","import './App.css';\nimport SignUpForm from './feedback.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignUpForm />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}